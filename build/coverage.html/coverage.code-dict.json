{"/home/travis/build/npmtest/node-npmtest-material2/test.js":"/* istanbul instrument in package npmtest_material2 */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-material2/lib.npmtest_material2.js":"/* istanbul instrument in package npmtest_material2 */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_material2 = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_material2 = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-material2/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-material2 && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_material2 */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_material2\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_material2.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_material2.rollup.js'] =\n            local.assetsDict['/assets.npmtest_material2.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_material2.__dirname + '/lib.npmtest_material2.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-material2/node_modules/material2/config/environment.js":"/* jshint node: true */\n\nmodule.exports = function(environment) {\n  return {\n    environment: environment,\n    baseURL: '/',\n    locationType: 'auto'\n  };\n};\n\n","/home/travis/build/npmtest/node-npmtest-material2/node_modules/material2/scripts/browserstack/start_tunnel.js":"'use strict';\n/**\n * Start the BrowserStack tunnel. Once its started it creates a file so the callee can wait\n * for the tunnel to be started.\n */\n\nvar fs = require('fs');\nvar http = require('http');\nvar BrowserStackTunnel = require('browserstacktunnel-wrapper');\n\nvar HOSTNAME = 'localhost';\nvar PORTS = [9876, 9877];\nvar ACCESS_KEY = process.env.BROWSER_STACK_ACCESS_KEY;\nvar READY_FILE = process.env.BROWSER_PROVIDER_READY_FILE;\nvar TUNNEL_IDENTIFIER = process.env.TRAVIS_JOB_NUMBER;\n\n// We need to start fake servers, otherwise the tunnel does not start.\nvar fakeServers = [];\nvar hosts = [];\n\nPORTS.forEach(function(port) {\n  fakeServers.push(http.createServer(function() {}).listen(port));\n  hosts.push({\n    name: HOSTNAME,\n    port: port,\n    sslFlag: 0\n  });\n});\n\nvar tunnel = new BrowserStackTunnel({\n  key: ACCESS_KEY,\n  localIdentifier: TUNNEL_IDENTIFIER,\n  hosts: hosts\n});\n\nconsole.log('Starting tunnel on ports', PORTS.join(', '));\ntunnel.start(function(error) {\n  if (error) {\n    console.error('Can not establish the tunnel', error);\n  } else {\n    console.log('Tunnel established.');\n    fakeServers.forEach(function(server) {\n      server.close();\n    });\n\n    if (READY_FILE) {\n      fs.writeFile(READY_FILE, '');\n    }\n  }\n});\n\ntunnel.on('error', function(error) {\n  console.error(error);\n});\n","/home/travis/build/npmtest/node-npmtest-material2/node_modules/material2/scripts/ci/forbidden-identifiers.js":"#!/usr/bin/env node\n\n'use strict';\n/*\n * This script analyzes the current commits of the CI.\n * It will search for blocked statements, which have been added in the commits and fail if present.\n */\n\nconst child_process = require('child_process');\nconst fs = require('fs');\nconst path = require('path');\n\nconst exec = function(cmd) {\n  return new Promise(function(resolve, reject) {\n    child_process.exec(cmd, function(err, stdout /*, stderr */) {\n      if (err) {\n        reject(err);\n      } else {\n        resolve(stdout);\n      }\n    });\n  });\n};\n\n\nconst blocked_statements = [\n  '\\\\bddescribe\\\\(',\n  '\\\\bfdescribe\\\\(',\n  '\\\\biit\\\\(',\n  '\\\\bfit\\\\(',\n  '\\\\bxdescribe\\\\(',\n  '\\\\bxit\\\\(',\n  '\\\\bdebugger;',\n  'from \\\\\\'rxjs/Rx\\\\\\'',\n];\n\n// Retrieves all scope packages dynamically from the source.\n// Developers shouldn't be able to import from other scope packages by using relative paths.\nconst componentFolders = fs\n  .readdirSync(`${__dirname}/../../src/components`)\n  .map(componentName => `src/components/${componentName}`);\n\nconst scopePackages = ['src/core'].concat(componentFolders);\n\nconst blockedRegex = new RegExp(blocked_statements.join('|'), 'g');\nconst importRegex = /from\\s+'(.*)';/g;\n\n/**\n * Find the fork point between HEAD of the current branch, and master.\n * @return {Promise<string>} A promise which resolves with the fork SHA (or reject).\n */\nfunction findForkPoint() {\n  return exec('git merge-base --fork-point HEAD master')\n    .then(function(stdout) {\n      return stdout.split('\\n')[0];\n    });\n}\n\n/**\n * Get the commit range to evaluate when this script is run.\n * @return {Promise<string>} A commit range of the form ref1...ref2.\n */\nfunction getCommitRange() {\n  if (process.env['TRAVIS_COMMIT_RANGE']) {\n    return Promise.resolve(process.env['TRAVIS_COMMIT_RANGE']);\n  } else {\n    return findForkPoint().then((forkPointSha) => `${forkPointSha}...HEAD`);\n  }\n}\n\n/**\n * List all the files that have been changed or added in the last commit range.\n * @returns {Promise<Array<string>>} Resolves with a list of files that are\n *     added or changed.\n */\nfunction findChangedFiles() {\n  return getCommitRange()\n    .then(range => {\n      return exec(`git diff --name-status ${range} ./src ./e2e`);\n    })\n    .then(rawDiff => {\n      // Ignore deleted files.\n      return rawDiff.split('\\n')\n          .filter(function(line) {\n            // Status: C## => Copied (##% confident)\n            //         R## => Renamed (##% confident)\n            //         D   => Deleted\n            //         M   => Modified\n            //         A   => Added\n            return line.match(/([CR][0-9]*|[AM])\\s+/);\n          })\n          .map(function(line) {\n            return line.split(/\\s+/, 2)[1];\n          });\n    });\n}\n\n/**\n * Checks the line for any relative imports of a scope package, which should be imported by using\n * the scope package name instead of the relative path.\n * @param fileName Filename to validate the path\n * @param line Line to be checked.\n */\nfunction isRelativeScopeImport(fileName, line) {\n  let importMatch = importRegex.exec(line);\n\n  // We have to reset the last index of the import regex, otherwise we\n  // would have incorrect matches in the next execution.\n  importRegex.lastIndex = 0;\n\n  // Skip the check if the current line doesn't match any imports.\n  if (!importMatch) {\n    return false;\n  }\n\n  let importPath = importMatch[1];\n\n  // Skip the check when the import doesn't start with a dot, because the line\n  // isn't importing any file relatively. Also applies to scope packages starting\n  // with `@`.\n  if (!importPath.startsWith('.')) {\n    return false;\n  }\n\n  // Transform the relative import path into an absolute path.\n  importPath = path.resolve(path.dirname(fileName), importPath);\n\n  let currentScope = findScope(fileName);\n  let importScope = findScope(importPath);\n\n  if (currentScope !== importScope) {\n    // Transforms the invalid import statement into a correct import statement, which uses the scope package.\n    let scopeImport = `@angular2-material/${path.basename(importScope)}/${path.relative(importScope, importPath)}`;\n\n    return {\n      currentScope: currentScope,\n      importScope: importScope,\n      invalidStatement: importMatch[0],\n      scopeImportPath: scopeImport\n    }\n  }\n\n  return false;\n\n  function findScope(filePath) {\n    // Normalize the filePath as well, to avoid issues with the different environments path delimiter.\n    filePath = path.normalize(filePath);\n\n    // Iterate through all scopes and try to find them inside of the file path.\n    return scopePackages.filter(scope => filePath.indexOf(path.normalize(scope)) !== -1).pop();\n  }\n\n}\n\n\n// Find all files, check for errors, and output every errors found.\nfindChangedFiles()\n  .then(fileList => {\n    // Only match .js or .ts, and remove .d.ts files.\n    return fileList.filter(function(name) {\n      return name.match(/\\.[jt]s$/) && !name.match(/\\.d\\.ts$/);\n    });\n  })\n  .then(fileList => {\n    // Read every file and return a Promise that will contain an array of\n    // Object of the form { fileName, content }.\n    return Promise.all(fileList.map(function(fileName) {\n      return {\n        fileName: fileName,\n        content: fs.readFileSync(fileName, { encoding: 'utf-8' })\n      };\n    }));\n  })\n  .then(diffList => {\n    // Reduce the diffList to an array of errors. The array will be empty if no errors\n    // were found.\n    return diffList.reduce((errors, diffEntry) => {\n      let fileName = diffEntry.fileName;\n      let content = diffEntry.content.split('\\n');\n      let ln = 0;\n\n      // Get all the lines that start with `+`.\n      content.forEach(function(line) {\n        ln++;\n\n        let matches = line.match(blockedRegex);\n        let isScopeImport = isRelativeScopeImport(fileName, line);\n\n        if (matches || isScopeImport) {\n          // Accumulate all errors at once.\n          let error = {\n            fileName: fileName,\n            lineNumber: ln,\n            statement: matches && matches[0] || isScopeImport.invalidStatement\n          };\n\n          if (isScopeImport) {\n            error.message =\n              '   You are using an import statement, which imports a file from another scope package.\\n' +\n              `   Please import the file by using the following path: ${isScopeImport.scopeImportPath}`;\n          }\n\n          errors.push(error);\n        }\n      });\n      return errors;\n    }, []);\n  })\n  .then(errors => {\n    if (errors.length > 0) {\n      console.error('Error: You are using a statement in your commit, which is not allowed.\\n');\n\n      errors.forEach(entry => {\n        if (entry.message) console.error(entry.message);\n        console.error(`   ${entry.fileName}@${entry.lineNumber}, Statement: ${entry.statement}.\\n`);\n      });\n\n      process.exit(1);\n    }\n  })\n  .catch(err => {\n    // An error occured in this script. Output the error and the stack.\n    console.error('An error occured during execution:');\n    console.error(err);\n    console.error(err.stack);\n    process.exit(2);\n  });\n","/home/travis/build/npmtest/node-npmtest-material2/node_modules/material2/scripts/release/changelog.js":"#!/usr/bin/env node\n\n'use strict';\n/**\n * Creates a conventional changelog from the current git repository / metadata.\n */\n\nvar fs = require('fs');\nvar addStream = require('add-stream');\nvar cl = require('conventional-changelog');\nvar inStream = fs.createReadStream('CHANGELOG.md');\n\n/**\n * When the command line argument `--force` is provided, then the full changelog will created and overwritten.\n * By default, it will only create the changelog from the latest tag to head and prepends it to the changelog.\n */\nvar isForce = process.argv.indexOf('--force') !== -1;\n\ninStream.on('error', function(err) {\n  console.error('An error occurred, while reading the previous changelog file.\\n' +\n    'If there is no previous changelog, then you should create an empty file or use the `--force` flag.\\n' + err);\n\n  process.exit(1);\n});\n\nvar config = {\n  preset: 'angular',\n  releaseCount: isForce ? 0 : 1\n};\n\nvar stream = cl(config)\n  .on('error', function(err) {\n    console.error('An error occurred while generating the changelog: ' + err);\n  })\n  .pipe(!isForce && addStream(inStream) || getOutputStream());\n\n// When we are pre-pending the new changelog, then we need to wait for the input stream to be ending,\n// otherwise we can't write into the same destination.\nif (!isForce) {\n  inStream.on('end', function() {\n    stream.pipe(getOutputStream());\n  });\n}\n\nfunction getOutputStream() {\n  return fs.createWriteStream('CHANGELOG.md');\n}\n","/home/travis/build/npmtest/node-npmtest-material2/node_modules/material2/scripts/release/inline-resources.js":"#!/usr/bin/env node\n'use strict';\n\nconst fs = require('fs');\nconst path = require('path');\nconst glob = require('glob');\n\n/**\n * Simple Promiseify function that takes a Node API and return a version that supports promises.\n * We use promises instead of synchronized functions to make the process less I/O bound and\n * faster. It also simplify the code.\n */\nfunction promiseify(fn) {\n  return function() {\n    const args = [].slice.call(arguments, 0);\n    return new Promise((resolve, reject) => {\n      fn.apply(this, args.concat([function (err, value) {\n        if (err) {\n          reject(err);\n        } else {\n          resolve(value);\n        }\n      }]));\n    });\n  };\n}\n\nconst readFile = promiseify(fs.readFile);\nconst writeFile = promiseify(fs.writeFile);\n\n\n/**\n * For every argument, inline the templates and styles under it and write the new file.\n */\nfor (let arg of process.argv.slice(2)) {\n  if (arg.indexOf('*') < 0) {\n    // Argument is a directory target, add glob patterns to include every files.\n    arg = path.join(arg, '**', '*');\n  }\n\n  const files = glob.sync(arg, {})\n    .filter(name => /\\.js$/.test(name));  // Matches only JavaScript files.\n\n  // Generate all files content with inlined templates.\n  files.forEach(filePath => {\n    readFile(filePath, 'utf-8')\n      .then(content => inlineTemplate(filePath, content))\n      .then(content => inlineStyle(filePath, content))\n      .then(content => writeFile(filePath, content))\n      .catch(err => {\n        console.error('An error occured: ', err);\n      });\n  });\n}\n\n\n/**\n * Inline the templates for a source file. Simply search for instances of `templateUrl: ...` and\n * replace with `template: ...` (with the content of the file included).\n * @param filePath {string} The path of the source file.\n * @param content {string} The source file's content.\n * @return {string} The content with all templates inlined.\n */\nfunction inlineTemplate(filePath, content) {\n  return content.replace(/templateUrl:\\s*'([^']+?\\.html)'/g, function(m, templateUrl) {\n    const templateFile = path.join(path.dirname(filePath), templateUrl);\n    const templateContent = fs.readFileSync(templateFile, 'utf-8');\n    const shortenedTemplate = templateContent\n      .replace(/([\\n\\r]\\s*)+/gm, ' ')\n      .replace(/\"/g, '\\\\\"');\n    return `template: \"${shortenedTemplate}\"`;\n  });\n}\n\n\n/**\n * Inline the styles for a source file. Simply search for instances of `styleUrls: [...]` and\n * replace with `styles: [...]` (with the content of the file included).\n * @param filePath {string} The path of the source file.\n * @param content {string} The source file's content.\n * @return {string} The content with all styles inlined.\n */\nfunction inlineStyle(filePath, content) {\n  return content.replace(/styleUrls:\\s*(\\[[\\s\\S]*?\\])/gm, function(m, styleUrls) {\n    const urls = eval(styleUrls);\n    return 'styles: ['\n      + urls.map(styleUrl => {\n          const styleFile = path.join(path.dirname(filePath), styleUrl);\n          const styleContent = fs.readFileSync(styleFile, 'utf-8');\n          const shortenedStyle = styleContent\n            .replace(/([\\n\\r]\\s*)+/gm, ' ')\n            .replace(/\"/g, '\\\\\"');\n          return `\"${shortenedStyle}\"`;\n        })\n        .join(',\\n')\n      + ']';\n  });\n}\n","/home/travis/build/npmtest/node-npmtest-material2/node_modules/material2/scripts/sauce/sauce_config.js":"module.exports = process.env.SAUCE_ACCESS_KEY.split('').reverse().join('');\n"}